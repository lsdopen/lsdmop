{{- if .Values.elastic.enabled -}}
apiVersion: elasticsearch.k8s.elastic.co/v1
kind: Elasticsearch
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  annotations:
    {{ .Values.elastic.annotations | toYaml | indent 4 | trim }}
spec:
  version: "{{ .Values.elastic.version }}"
  podDisruptionBudget:
    metadata: {}
    spec:
      maxUnavailable: 1
      selector:
        matchLabels:
          elasticsearch.k8s.elastic.co/cluster-name: {{ .Release.Name }}
  http:
    service:
      metadata: {}
      spec:
        selector:
          common.k8s.elastic.co/type: elasticsearch
          elasticsearch.k8s.elastic.co/cluster-name: {{ .Release.Name }}
          elasticsearch.k8s.elastic.co/node-ingress: "true"
    tls:
      certificate: {}
  transport:
    service:
      metadata: { }
      spec:
        selector:
          common.k8s.elastic.co/type: elasticsearch
          elasticsearch.k8s.elastic.co/cluster-name: {{ .Release.Name }}
    tls:
      certificate: { }
      certificateAuthorities: { }
  nodeSets:
{{- range $name, $nodeSet := .Values.elastic.nodeSets }}
    - config:
        cluster.routing.allocation.awareness.attributes: {{ $nodeSet.allocation_awareness | default "k8s_node_name" }}
        node.store.allow_mmap: false
        #path.repo: /usr/share/elasticsearch/snapshots
        {{- if not (empty $nodeSet.roles) }}
        node.roles:
          {{ $nodeSet.roles | toYaml | indent 10 | trim }}
        {{- end }}
        {{- range $key, $val := $nodeSet.node_attributes }}
        node.attr.{{ $key }}: {{ $val }}
        {{- end }}
        http.max_content_length: 100mb
        http.compression: true
        transport.compress: true
        xpack:
          security:
            authc:
              api_key:
                enabled: true #required for fleet
{{- if $.Values.elastic.ad.enabled }}
              realms:
                native:
                  native1:
                    order: 0
                {{- range $key, $val := $.Values.elastic.ad.realms }}
                {{ $key }}:
                  {{ $val | toYaml | indent 18 | trim  }}
                {{- end }}                        
{{- end }}          
      count: {{ $nodeSet.count }}
      name: {{ $name }}
      podTemplate:
        metadata:
          labels:
            scrape: es
        spec:
          affinity: {}
          topologySpreadConstraints:
          - labelSelector:
              matchLabels:
                elasticsearch.k8s.elastic.co/cluster-name: {{ $.Release.Name }}
            maxSkew: 1
            minDomains: {{ $nodeSet.count }}
            topologyKey: kubernetes.io/hostname
            whenUnsatisfiable: DoNotSchedule
{{- if $nodeSet.enableZoneTopologySpread }}
          - labelSelector:
              matchLabels:
                elasticsearch.k8s.elastic.co/cluster-name: {{ $.Release.Name }}
                elasticsearch.k8s.elastic.co/statefulset-name: lsdmop-es-{{ $name }}
            maxSkew: 1
            minDomains: 3
            topologyKey: topology.kubernetes.io/zone
            whenUnsatisfiable: DoNotSchedule                        
{{- end }}
          #topologySpreadConstraints:
          #  - maxSkew: 1
          #    topologyKey: topology.kubernetes.io/zone
          #    whenUnsatisfiable: DoNotSchedule
          #    labelSelector:
          #      matchLabels:
          #        elasticsearch.k8s.elastic.co/cluster-name: elasticsearch-sample
          #        elasticsearch.k8s.elastic.co/statefulset-name: elasticsearch-sample-es-default
          serviceAccountName: {{ $.Release.Name }}-elastic
          serviceAccount: {{ $.Release.Name }}-elastic
          automountServiceAccountToken: true
          hostAliases:
            {{ $.Values.elastic.hostAliases | toYaml | indent 12 | trim  }}
          initContainers:
            - name: set-s3-bucket-web-token-dir
              command:
              - mkdir
              - -p
              - /usr/share/elasticsearch/config/repository-s3
            - name: remove-s3-bucket-web-token-symlink
              command:
              - rm
              - -rf
              - /usr/share/elasticsearch/config/repository-s3/aws-web-identity-token-file
            - name: set-s3-bucket-web-token-symlink
              command:
              - ln
              - -s
              - /var/run/secrets/eks.amazonaws.com/serviceaccount/token 
              - "/usr/share/elasticsearch/config/repository-s3/aws-web-identity-token-file"
          containers:
            - env:
                - name: ZONE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.annotations['topology.kubernetes.io/zone']
                {{ if $.Values.elastic.ad.enabled }}
                - name: AD_BIND_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: lsdmop-es-ad-bind-user
                      key: ObserveAD
                      optional: true
                {{- end }}
              name: elasticsearch
              resources: 
                {{ $nodeSet.resources | toYaml | indent 16 | trim }}
          tolerations: 
            {{ $nodeSet.tolerations | toYaml | indent 12 | trim }}
          {{- with $nodeSet.nodeSelector }}
          nodeSelector:
          {{ toYaml . | indent 12 }}
          {{- end }}
      volumeClaimTemplates:
        - metadata:
            creationTimestamp: null
            name: elasticsearch-data
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: {{ $nodeSet.storageSize }}
            storageClassName: {{ $nodeSet.storageClassName }}
{{- end }}
---     
{{- end }}
