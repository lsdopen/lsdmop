# Elastic Metricbeat {{ .Release.Name }}-metricbeat
{{- if .Values.lsdmop.elastic.fleet.enabled -}}
---
apiVersion: agent.k8s.elastic.co/v1alpha1
kind: Agent
metadata:
  name: fleet-server-{{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
spec:
  version: {{ .Values.lsdmop.eckVersion }}
  kibanaRef:
    name: {{ .Release.Name }}
  elasticsearchRefs:
  - name: {{ .Release.Name }}
  mode: fleet
  fleetServerEnabled: true
  deployment:
    replicas: 2
    podTemplate:
      spec:
        serviceAccountName: elastic-agent
        automountServiceAccountToken: true
        securityContext:
          runAsUser: 0
---
apiVersion: agent.k8s.elastic.co/v1alpha1
kind: Agent
metadata:
  name: elastic-agent-{{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
spec:
  version: {{ .Values.lsdmop.eckVersion }}
  kibanaRef:
    name: {{ .Release.Name }}
  fleetServerRef:
    name: fleet-server-{{ .Release.Name }}
  mode: fleet
  daemonSet:
    podTemplate:
      spec:
        containers:
          - name: agent
            image: docker.elastic.co/beats/elastic-agent:{{ .Values.lsdmop.eckVersion }}
          - name: FLEET_INSECURE
            value: 'true'
        serviceAccountName: elastic-agent
        automountServiceAccountToken: true
        securityContext:
          runAsUser: 0
        tolerations:
        - key: dedicated
          effect: "NoSchedule"
          operator: Exists
---
# apiVersion: agent.k8s.elastic.co/v1alpha1
# kind: Agent
# metadata: 
#   name: elastic-agent-apm-server-{{ .Release.Name }}
# spec:
#   version: {{ .Values.lsdmop.eckVersion }}
#   kibanaRef:
#     name: {{ .Release.Name }}
#   fleetServerRef: 
#     name: fleet-server-{{ .Release.Name }}
#   mode: fleet
#   deployment:
#     replicas: 1
#     podTemplate:
#       spec:
#         securityContext:
#           runAsUser: 0
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: elastic-agent
rules:
- apiGroups: [""] # "" indicates the core API group
  resources:
  - pods
  - nodes
  - namespaces
  verbs:
  - get
  - watch
  - list
- apiGroups: ["coordination.k8s.io"]
  resources:
  - leases
  verbs:
  - get
  - create
  - update
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: elastic-agent
  namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: elastic-agent
subjects:
- kind: ServiceAccount
  name: elastic-agent
  namespace: {{ .Release.Namespace }}
roleRef:
  kind: ClusterRole
  name: elastic-agent
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Service
metadata:
  name: lsdmop-apm-http
  namespace: lsdmop
  labels:
    apm.k8s.elastic.co/name: lsdmop
    common.k8s.elastic.co/type: agent
    app.kubernetes.io/managed-by: Helm
  annotations:
    meta.helm.sh/release-name: {{ .Release.Namespace }}
spec:
  ports:
    - name: https
      protocol: TCP
      port: 8200
      targetPort: 8200
  selector:
    common.k8s.elastic.co/type: agent
  type: ClusterIP
  sessionAffinity: None
  ipFamilies:
    - IPv4
  ipFamilyPolicy: SingleStack
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: lsdmop-apm
  namespace: lsdmop
  labels:
    app: apm-server-agent
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - {{ .Values.lsdmop.elastic.apm.ingress.url }}
      secretName: {{ .Values.lsdmop.elastic.apm.ingress.tls.secretName }}
  rules:
    - host: {{ .Values.lsdmop.elastic.apm.ingress.url }}
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: lsdmop-apm-http
                port:
                  number: 8200

{{- end }}