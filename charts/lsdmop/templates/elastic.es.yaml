# Elasticsearch
{{- if .Values.lsdmop.elastic.enabled -}}
---
apiVersion: elasticsearch.k8s.elastic.co/v1
kind: Elasticsearch
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
spec:
  version: "{{ .Values.lsdmop.elastic.version }}"
  image: "{{ .Values.lsdmop.elastic.image }}"
  nodeSets:
    # EXAMPLE BASE CONFIG WITH ALL ROLES ADDED
    # - config:
    #     node.store.allow_mmap: false
    #     #path.repo: /usr/share/elasticsearch/snapshots
    #     node.roles: ["master", "data_content", "data", "ml", "transform", "remote_cluster_client", "ingest"]
    #   count: 1
    #   name: default
    #   podTemplate:
    #     metadata:
    #       creationTimestamp: null
    #     spec:
    #       containers:
    #         - env:
    #             - name: ES_JAVA_OPTS
    #               value: '-Xms8g -Xmx8g -Dlog4j2.formatMsgNoLookups=true'
    #           name: elasticsearch
    #           resources:
    #             limits:
    #               cpu: '4000m'
    #               memory: 4Gi
    #             requests:
    #               cpu: '4000m'
    #               memory: 4Gi
    #       tolerations:
    #         - effect: NoSchedule
    #           key: dedicated
    #           operator: Equal
    #           value: warm
    #       affinity:
    #         nodeAffinity:
    #           requiredDuringSchedulingIgnoredDuringExecution:
    #             nodeSelectorTerms:
    #             - matchExpressions:
    #               - key: node.type
    #                 operator: In
    #                 values:
    #                 - warm                              
    #   volumeClaimTemplates:
    #     - metadata:
    #         creationTimestamp: null
    #         name: elasticsearch-data
    #       spec:
    #         accessModes:
    #           - ReadWriteOnce
    #         resources:
    #           requests:
    #             storage: 10Gi
    #         storageClassName: ebs-gp3

    # HOT DATA NODES
    - config:
        node.store.allow_mmap: false
        #path.repo: /usr/share/elasticsearch/snapshots
        node.roles: ["master", "data_hot", "data", "transform", "remote_cluster_client", "ingest"]
        node.attr.data: hot
        xpack.security.authc.api_key.enabled: true #required for fleet
      count: {{ .Values.lsdmop.elastic.cluster.hot.count }}
      name: hot-data
      podTemplate:
        metadata:
          creationTimestamp: null
        spec:
          serviceAccountName: {{ .Release.Name }}-elastic
          serviceAccount: {{ .Release.Name }}-elastic
          automountServiceAccountToken: true
          # topologySpreadConstraints:
          #   - maxSkew: 1
          #     topologyKey: topology.kubernetes.io/zone
          #     whenUnsatisfiable: DoNotSchedule
          #     labelSelector:
          #       matchLabels:
          #         elasticsearch.k8s.elastic.co/cluster-name: {{ .Release.Name }}
          #         elasticsearch.k8s.elastic.co/statefulset-name: {{ .Release.Name }}-es-hot-data          
          initContainers:
            - name: set-s3-bucket-web-token-dir
              command:
              - mkdir
              - -p
              - /usr/share/elasticsearch/config/repository-s3
            - name: remove-s3-bucket-web-token-symlink
              command:
              - rm
              - -rf
              - /usr/share/elasticsearch/config/repository-s3/aws-web-identity-token-file
            - name: set-s3-bucket-web-token-symlink
              command:
              - ln
              - -s
              - /var/run/secrets/eks.amazonaws.com/serviceaccount/token 
              - "/usr/share/elasticsearch/config/repository-s3/aws-web-identity-token-file"
          containers:
            - env:
                - name: ES_JAVA_OPTS
                  value: "-Xms{{ div .Values.lsdmop.elastic.cluster.hot.mem 2 }}g -Xmx{{ div .Values.lsdmop.elastic.cluster.hot.mem 2}}g"
                - name: ZONE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.annotations['topology.kubernetes.io/zone']           
              name: elasticsearch
              resources:
                limits:
                  cpu: {{ .Values.lsdmop.elastic.cluster.hot.cpulim }}
                  memory: {{ .Values.lsdmop.elastic.cluster.hot.mem }}Gi
                requests:
                  cpu: {{ .Values.lsdmop.elastic.cluster.hot.cpureq }}
                  memory: {{ .Values.lsdmop.elastic.cluster.hot.mem }}Gi
          tolerations:
            - effect: NoSchedule
              key: dedicated
              operator: Equal
              value: {{ .Values.lsdmop.elastic.cluster.hot.tolerations }}
          nodeSelector:
            node.type: hot                             
      volumeClaimTemplates:
        - metadata:
            creationTimestamp: null
            name: elasticsearch-data
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: {{ .Values.lsdmop.elastic.cluster.hot.storagesize }}
            storageClassName: {{ .Values.lsdmop.elastic.cluster.hot.storageclass }}
    #WARM DATA NODES            
    - config:
        node.store.allow_mmap: false
        #path.repo: /usr/share/elasticsearch/snapshots
        node.roles: ["master", "data_warm", "data", "data_content", "transform", "remote_cluster_client", "ingest"]
        node.attr.data: warm
        xpack.security.authc.api_key.enabled: true #required for fleet
      count: {{ .Values.lsdmop.elastic.cluster.warm.count }}
      name: warm-data
      podTemplate:
        metadata:
          creationTimestamp: null
        spec:
          serviceAccountName: {{ .Release.Name }}-elastic
          serviceAccount: {{ .Release.Name }}-elastic
          automountServiceAccountToken: true          
          # topologySpreadConstraints:
          #   - maxSkew: 1
          #     topologyKey: topology.kubernetes.io/zone
          #     whenUnsatisfiable: DoNotSchedule
          #     labelSelector:
          #       matchLabels:
          #         elasticsearch.k8s.elastic.co/cluster-name: {{ .Release.Name }}
          #         elasticsearch.k8s.elastic.co/statefulset-name: {{ .Release.Name }}-es-warm-data          
          initContainers:
            - name: set-s3-bucket-web-token-dir
              command:
              - mkdir
              - -p
              - /usr/share/elasticsearch/config/repository-s3
            - name: remove-s3-bucket-web-token-symlink
              command:
              - rm
              - -rf
              - /usr/share/elasticsearch/config/repository-s3/aws-web-identity-token-file
            - name: set-s3-bucket-web-token-symlink
              command:
              - ln
              - -s
              - /var/run/secrets/eks.amazonaws.com/serviceaccount/token 
              - "/usr/share/elasticsearch/config/repository-s3/aws-web-identity-token-file"
          containers:
            - env:
                - name: ES_JAVA_OPTS
                  value: "-Xms{{ div .Values.lsdmop.elastic.cluster.warm.mem 2 }}g -Xmx{{ div .Values.lsdmop.elastic.cluster.warm.mem 2}}g"
                - name: ZONE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.annotations['topology.kubernetes.io/zone']                  
              name: elasticsearch
              resources:
                limits:
                  cpu: {{ .Values.lsdmop.elastic.cluster.warm.cpulim }}
                  memory: {{ .Values.lsdmop.elastic.cluster.warm.mem }}Gi
                requests:
                  cpu: {{ .Values.lsdmop.elastic.cluster.warm.cpureq }}
                  memory: {{ .Values.lsdmop.elastic.cluster.warm.mem }}Gi
          tolerations:
            - effect: NoSchedule
              key: dedicated
              operator: Equal
              value: {{ .Values.lsdmop.elastic.cluster.warm.tolerations }}
          nodeSelector:
            node.type: warm                                  
      volumeClaimTemplates:
        - metadata:
            creationTimestamp: null
            name: elasticsearch-data
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: {{ .Values.lsdmop.elastic.cluster.warm.storagesize }}
            storageClassName: {{ .Values.lsdmop.elastic.cluster.warm.storageclass }}

    # MACHINE LEARNING NODES            
    - config:
        node.store.allow_mmap: false
        #path.repo: /usr/share/elasticsearch/snapshots
        node.roles: ["ml"]
        #node.attr.data: ml
        xpack.security.authc.api_key.enabled: true #required for fleet
      count: {{ .Values.lsdmop.elastic.cluster.ml.count }}
      name: ml
      podTemplate:
        metadata:
          creationTimestamp: null
        spec:
          serviceAccountName: {{ .Release.Name }}-elastic
          serviceAccount: {{ .Release.Name }}-elastic
          automountServiceAccountToken: true          
          containers:
            - env:
                - name: ES_JAVA_OPTS
                  #value: '-Xms1g -Xmx1g -Dlog4j2.formatMsgNoLookups=true'
                  value: "-Xms{{ div .Values.lsdmop.elastic.cluster.ml.mem 2 }}g -Xmx{{ div .Values.lsdmop.elastic.cluster.ml.mem 2}}g"
              name: elasticsearch
              resources:
                limits:
                  cpu: {{ .Values.lsdmop.elastic.cluster.ml.cpulim }}
                  memory: {{ .Values.lsdmop.elastic.cluster.ml.mem }}Gi
                requests:
                  cpu: {{ .Values.lsdmop.elastic.cluster.ml.cpureq }}
                  memory: {{ .Values.lsdmop.elastic.cluster.ml.mem }}Gi
      volumeClaimTemplates:
        - metadata:
            creationTimestamp: null
            name: elasticsearch-data
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: {{ .Values.lsdmop.elastic.cluster.ml.storagesize }}
            storageClassName: {{ .Values.lsdmop.elastic.cluster.ml.storageclass }}
---     
{{- end }}
